(declare-sort Sll_t)
(declare-sort Subrecord)
(declare-sort Record)
(declare-sort Map)

;Sll_t constants
(declare-func x0 () Sll_t)
(declare-func x1 () Sll_t)
(declare-func x2 () Sll_t)
(declare-func x3 () Sll_t)
(declare-func x4 () Sll_t)
(declare-func x5 () Sll_t)
(declare-func x6 () Sll_t)
(declare-func x7 () Sll_t)
(declare-func x8 () Sll_t)
(declare-func x9 () Sll_t)
(declare-func x10 () Sll_t)
(declare-func x11 () Sll_t)
(declare-func x12 () Sll_t)
(declare-func x13 () Sll_t)
(declare-func x14 () Sll_t)

(declare-func nil () Sll_t)

;distinct : a syntactic sugar
;distinct(x y) = (not (= x y))

;Field names
(declare-func next (Sll_t) Subrecord)

;Records
(declare-func ref (Subrecord) Record)

; Maps

(declare-func emp () Map)

; x |-> y
(declare-part pto (Sll_t Record) Map)

; 0 |-> y is bottom
(assert (forall ((y Record))
  (not (pto nil y))))

; ssep is sseparating conjunction
(declare-part ssep (Map Map) Map)
;Question: how to let ssep have arbitary number of arguments

; commutativity
(assert (forall ((h1 Map) (h2 Map))
  (= (ssep h1 h2) (ssep h2 h1))))

; associativity
(assert (forall ((h1 Map) (h2 Map) (h3 Map))
  (= (ssep (ssep h1 h2) h3)
     (ssep h1 (ssep h2 h3)))))

; identity
(assert (forall ((h Map))
  (= h (ssep h emp))))

; x |-> y * x |-> z = bottom
(assert (forall ((x Sll_t) (y Record) (z Record))
  (not (ssep (pto x y) (pto x z)))))


;List
(declare-func ls (Sll_t Sll_t) Map)
(assert (forall ((in Sll_t)(out Sll_t)) 
 (= (ls in out) (or (= in out) (exists ((u Sll_t)) (and (not (= in out)) 
                                                      (ssep (pto in (ref (next u))) (ls u out)
)))))
))
(assert
  (and 
    (= nil nil)
    (not (floor  
	(ssep
		(pto x2 (ref (next x9))) 
	(ssep 		
		(ls  x3 x6) 
	(ssep 		
		(pto x5 (ref (next x4))) 
	(ssep 		
		(pto x8 (ref (next x9))) 
	(ssep 		
		(pto x4 (ref (next x2))) 
	(ssep 		
		(pto x7 (ref (next x6))) 
	(ssep 		
		(pto x10 (ref (next x5))) 
	(ssep 		
		(pto x1 (ref (next x2))) 
	(ssep 		
		(pto x6 (ref (next x3))) 
	(ssep 		
		(ls  x9 x5) 
		emp
	))))))))))) )
  )
)
(assert
  (not
        (not (floor  
	(ssep
		(ls  x7 x6) 
	(ssep 		
		(ls  x8 x9) 
	(ssep 		
		(ls  x10 x5) 
	(ssep 		
		(ls  x5 x4) 
	(ssep 		
		(ls  x6 x3) 
	(ssep 		
		(ls  x3 x6) 
	(ssep 		
		(ls  x1 x2) 
	(ssep 		
		(ls  x4 x5) 
		emp
	))))))))) )
  ))

